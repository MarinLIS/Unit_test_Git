Написанные тесты покрывают основные сценарии для классов


для NumberListComparator:

testCompareAveragesFirstGreater:
Цель: Проверяем, что метод compareAverages правильно определяет и среднее значение первого списка больше второго.
Почему: Этот тест проверяет корректность работы метода сравнения в случае, когда первый список имеет большее среднее значение.

testCompareAveragesSecondGreater:
Цель: Проверяем, что метод compareAverages правильно определяет и среднее значение второго списка больше первого.
Почему: Этот тест проверяет корректность работы метода сравнения в случае, когда второй список имеет большее среднее значение.

testCompareAveragesEqual:
Цель: Проверяем, что метод compareAverages корректно определяет и средние значения двух списков равны.
Почему: Этот тест проверяет корректность работы метода сравнения в случае, когда средние значения двух списков одинаковы.

testCompareAveragesWithEmptyLists:
Цель: Проверить работу метода compareAverages с двумя идентичными списками (возможно, было создано с ошибкой и не
использовался реальный случай пустых списков).
Почему: Этот тест предназначен для проверки корректности метода сравнения, но в реальном сценарии этот тест может быть не нужен (поскольку он сравнивает одинаковые списки).


для NumberListTest:

testConstructorValidList:
Цель: Проверяем, что конструктор корректно инициализирует объект NumberList при передаче допустимого списка чисел.
Почему: Этот тест проверяет, что класс правильно создается и что метод getAverage возвращает ожидаемое значение при корректных входных данных.

testConstructorEmptyList:
Цель: Проверяем, что конструктор выбрасывает исключение IllegalArgumentException при передаче пустого списка.
Почему: Этот тест гарантирует, что пустой список (который недопустим) приводит к правильной ошибке, что предотвращает создание объекта с некорректными данными.

testConstructorNullList:
Цель: Проверяем, что конструктор выбрасывает исключение IllegalArgumentException при передаче null в качестве списка.
Почему: Этот тест проверяет, что объект не может быть создан с null, что соответствует ожиданиям для безопасной работы с объектами.

testConstructorWithNonInteger:
Цель: Проверяем, что конструктор выбрасывает исключение IllegalArgumentException, если список содержит нецелые числа.
Почему: Этот тест гарантирует, что класс принимает только целые числа, предотвращая использование недопустимых данных.

testGetAverage:
Цель: Проверяем, что метод getAverage корректно вычисляет среднее значение для списка целых чисел.
Почему: Этот тест проверяет корректность основного функционала класса, который должен вычислять среднее значение списка чисел.

testGetAverageWithSingleElement:
Цель: Проверяем, что метод getAverage правильно работает, если в списке только один элемент.
Почему: Этот тест проверяет крайний случай, чтобы убедиться, что метод корректно обрабатывает список с единственным элементом.
